version: "4"
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 2181:2181
    networks:
      - spring_network
    restart: always

  kafka-broker:
    image: confluentinc/cp-kafka:latest
    container_name: kafka-broker
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://broker:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    ports:
      - "9092:9092"
    networks:
      - spring_network
    restart: always

  redis:
    image: redis:latest
    container_name: redis
    ports:
      - 6379:6379
    networks:
      - spring_network
    restart: always
  
  sonarqube:
    image: sonarqube:latest
    container_name: sonarqube
    networks:
      - spring_network
    ports:
      - "9900:9000"

  eureka-server:
    container_name: eureka-server
    depends_on:
      - kafka-broker
      - sonarqube
      - redis
    build:
      context: ./eureka-serverf
    ports:
      - "8761:8761"
    networks:
      - spring_network
    restart: always

  config-server:
    container_name: config-server
    build:
      context: ./configserver-msf 
    ports:
      - "8888:8888" 
    networks:
      - spring_network
    depends_on:
      - eureka-server
    restart: always

networks:
  spring_network:
    driver: bridge